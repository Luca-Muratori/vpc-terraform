name: Create tier three infrastructure

on:
  push:
    branches: [main]
    paths:
      - "terraform/modules/vpc/**"
  pull_request: 
    branches:
      - 'main'
    paths:
      - "terraform/modules/vpc/**"

permissions:
  pull-requests: write
  contents: read

env:
  TF_LOG: INFO
  BUCKET_TF_STATE: ${{secrets.BUCKET_TF_STATE}}
  VPC_NAME: tf-vpc-project

jobs:
  create-vpc-with-tf:
    runs-on: ubuntu-latest
    defaults: 
      run: 
        shell:  bash
        working-directory: ./terraform

    steps:
      - name: set up github
        uses: actions/checkout@v3
      - name: set up terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          terraform_wrapper: false
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Handle VPC existence
        id: check-vpc
        run: |
          vpc_exists=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=tf-vpc-project" --query 'Vpcs[*]' --output text)
          if [ -n "$vpc_exists" ]; then
            echo "VPC 'tf-vpc-project' already exists."
            echo "vpc_exists=true" >> $GITHUB_OUTPUT
          else
            echo "VPC 'tf-vpc-project' does not exist."
            echo "vpc_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: VPC already exists
        if: steps.check-vpc.outputs.vpc_exists == 'true'
        run: |
          echo "VPC 'tf-vpc-project' already exists. Skipping creation."
          exit code 1
      - name: terraform init
        id: init
        if: steps.check-vpc.outputs.vpc_exists == 'false'
        run: |
          terraform init
      - name: terraform format
        id: fmt
        run: terraform fmt -check
      - name: terraform validate
        id:  validate
        run: terraform validate
      - name: terraform plan
        id: plan
        if: github.event_name== 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - uses : actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: terraform apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
  
 
      
